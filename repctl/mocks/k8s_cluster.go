/*
 *
 * Copyright © 2021-2024 Dell Inc. or its subsidiaries. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/*
 Copyright © 2025 Dell Inc. or its subsidiaries. All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/k8s/cluster.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/k8s_cluster.go -package=mocks -source=pkg/k8s/cluster.go ClusterInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/dell/csm-replication/api/v1"
	k8s "github.com/dell/repctl/pkg/k8s"
	types "github.com/dell/repctl/pkg/types"
	gomock "go.uber.org/mock/gomock"
	v10 "k8s.io/api/apps/v1"
	v11 "k8s.io/api/core/v1"
	v12 "k8s.io/api/storage/v1"
	meta "k8s.io/apimachinery/pkg/api/meta"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClientInterface) Create(ctx context.Context, obj client.Object, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockClientInterfaceMockRecorder) Create(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClientInterface)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockClientInterface) Delete(ctx context.Context, obj client.Object, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientInterfaceMockRecorder) Delete(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClientInterface)(nil).Delete), varargs...)
}

// DeleteAllOf mocks base method.
func (m *MockClientInterface) DeleteAllOf(ctx context.Context, obj client.Object, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOf", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOf indicates an expected call of DeleteAllOf.
func (mr *MockClientInterfaceMockRecorder) DeleteAllOf(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOf", reflect.TypeOf((*MockClientInterface)(nil).DeleteAllOf), varargs...)
}

// Get mocks base method.
func (m *MockClientInterface) Get(ctx context.Context, key client.ObjectKey, obj client.Object, opts ...client.GetOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockClientInterfaceMockRecorder) Get(ctx, key, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClientInterface)(nil).Get), varargs...)
}

// GroupVersionKindFor mocks base method.
func (m *MockClientInterface) GroupVersionKindFor(obj runtime.Object) (schema.GroupVersionKind, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupVersionKindFor", obj)
	ret0, _ := ret[0].(schema.GroupVersionKind)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupVersionKindFor indicates an expected call of GroupVersionKindFor.
func (mr *MockClientInterfaceMockRecorder) GroupVersionKindFor(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupVersionKindFor", reflect.TypeOf((*MockClientInterface)(nil).GroupVersionKindFor), obj)
}

// IsObjectNamespaced mocks base method.
func (m *MockClientInterface) IsObjectNamespaced(obj runtime.Object) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsObjectNamespaced", obj)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsObjectNamespaced indicates an expected call of IsObjectNamespaced.
func (mr *MockClientInterfaceMockRecorder) IsObjectNamespaced(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsObjectNamespaced", reflect.TypeOf((*MockClientInterface)(nil).IsObjectNamespaced), obj)
}

// List mocks base method.
func (m *MockClientInterface) List(ctx context.Context, list client.ObjectList, opts ...client.ListOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, list}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockClientInterfaceMockRecorder) List(ctx, list any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, list}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClientInterface)(nil).List), varargs...)
}

// Patch mocks base method.
func (m *MockClientInterface) Patch(ctx context.Context, obj client.Object, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockClientInterfaceMockRecorder) Patch(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockClientInterface)(nil).Patch), varargs...)
}

// RESTMapper mocks base method.
func (m *MockClientInterface) RESTMapper() meta.RESTMapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTMapper")
	ret0, _ := ret[0].(meta.RESTMapper)
	return ret0
}

// RESTMapper indicates an expected call of RESTMapper.
func (mr *MockClientInterfaceMockRecorder) RESTMapper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTMapper", reflect.TypeOf((*MockClientInterface)(nil).RESTMapper))
}

// Scheme mocks base method.
func (m *MockClientInterface) Scheme() *runtime.Scheme {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheme")
	ret0, _ := ret[0].(*runtime.Scheme)
	return ret0
}

// Scheme indicates an expected call of Scheme.
func (mr *MockClientInterfaceMockRecorder) Scheme() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheme", reflect.TypeOf((*MockClientInterface)(nil).Scheme))
}

// Status mocks base method.
func (m *MockClientInterface) Status() client.SubResourceWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(client.SubResourceWriter)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockClientInterfaceMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockClientInterface)(nil).Status))
}

// SubResource mocks base method.
func (m *MockClientInterface) SubResource(subResource string) client.SubResourceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubResource", subResource)
	ret0, _ := ret[0].(client.SubResourceClient)
	return ret0
}

// SubResource indicates an expected call of SubResource.
func (mr *MockClientInterfaceMockRecorder) SubResource(subResource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubResource", reflect.TypeOf((*MockClientInterface)(nil).SubResource), subResource)
}

// Update mocks base method.
func (m *MockClientInterface) Update(ctx context.Context, obj client.Object, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockClientInterfaceMockRecorder) Update(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClientInterface)(nil).Update), varargs...)
}

// MockClusterInterface is a mock of ClusterInterface interface.
type MockClusterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClusterInterfaceMockRecorder
	isgomock struct{}
}

// MockClusterInterfaceMockRecorder is the mock recorder for MockClusterInterface.
type MockClusterInterfaceMockRecorder struct {
	mock *MockClusterInterface
}

// NewMockClusterInterface creates a new mock instance.
func NewMockClusterInterface(ctrl *gomock.Controller) *MockClusterInterface {
	mock := &MockClusterInterface{ctrl: ctrl}
	mock.recorder = &MockClusterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterInterface) EXPECT() *MockClusterInterfaceMockRecorder {
	return m.recorder
}

// CreateNamespace mocks base method.
func (m *MockClusterInterface) CreateNamespace(arg0 context.Context, arg1 *v11.Namespace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNamespace indicates an expected call of CreateNamespace.
func (mr *MockClusterInterfaceMockRecorder) CreateNamespace(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespace", reflect.TypeOf((*MockClusterInterface)(nil).CreateNamespace), arg0, arg1)
}

// CreateObject mocks base method.
func (m *MockClusterInterface) CreateObject(arg0 context.Context, arg1 []byte) (runtime.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObject", arg0, arg1)
	ret0, _ := ret[0].(runtime.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObject indicates an expected call of CreateObject.
func (mr *MockClusterInterfaceMockRecorder) CreateObject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObject", reflect.TypeOf((*MockClusterInterface)(nil).CreateObject), arg0, arg1)
}

// CreatePersistentVolumeClaimsFromPVs mocks base method.
func (m *MockClusterInterface) CreatePersistentVolumeClaimsFromPVs(arg0 context.Context, arg1 string, arg2 []types.PersistentVolume, arg3 string, arg4 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePersistentVolumeClaimsFromPVs", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePersistentVolumeClaimsFromPVs indicates an expected call of CreatePersistentVolumeClaimsFromPVs.
func (mr *MockClusterInterfaceMockRecorder) CreatePersistentVolumeClaimsFromPVs(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePersistentVolumeClaimsFromPVs", reflect.TypeOf((*MockClusterInterface)(nil).CreatePersistentVolumeClaimsFromPVs), arg0, arg1, arg2, arg3, arg4)
}

// CreateStatefulSet mocks base method.
func (m *MockClusterInterface) CreateStatefulSet(ctx context.Context, sts *v10.StatefulSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatefulSet", ctx, sts)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStatefulSet indicates an expected call of CreateStatefulSet.
func (mr *MockClusterInterfaceMockRecorder) CreateStatefulSet(ctx, sts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatefulSet", reflect.TypeOf((*MockClusterInterface)(nil).CreateStatefulSet), ctx, sts)
}

// DeletePersistentVolumeClaim mocks base method.
func (m *MockClusterInterface) DeletePersistentVolumeClaim(ctx context.Context, pvc *v11.PersistentVolumeClaim, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, pvc}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePersistentVolumeClaim", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePersistentVolumeClaim indicates an expected call of DeletePersistentVolumeClaim.
func (mr *MockClusterInterfaceMockRecorder) DeletePersistentVolumeClaim(ctx, pvc any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, pvc}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePersistentVolumeClaim", reflect.TypeOf((*MockClusterInterface)(nil).DeletePersistentVolumeClaim), varargs...)
}

// DeletePod mocks base method.
func (m *MockClusterInterface) DeletePod(ctx context.Context, pod *v11.Pod, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, pod}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePod", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePod indicates an expected call of DeletePod.
func (mr *MockClusterInterfaceMockRecorder) DeletePod(ctx, pod any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, pod}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePod", reflect.TypeOf((*MockClusterInterface)(nil).DeletePod), varargs...)
}

// DeleteStsOrphan mocks base method.
func (m *MockClusterInterface) DeleteStsOrphan(ctx context.Context, sts *v10.StatefulSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStsOrphan", ctx, sts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStsOrphan indicates an expected call of DeleteStsOrphan.
func (mr *MockClusterInterfaceMockRecorder) DeleteStsOrphan(ctx, sts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStsOrphan", reflect.TypeOf((*MockClusterInterface)(nil).DeleteStsOrphan), ctx, sts)
}

// FilterPersistentVolumeClaims mocks base method.
func (m *MockClusterInterface) FilterPersistentVolumeClaims(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*types.PersistentVolumeClaimList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterPersistentVolumeClaims", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*types.PersistentVolumeClaimList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterPersistentVolumeClaims indicates an expected call of FilterPersistentVolumeClaims.
func (mr *MockClusterInterfaceMockRecorder) FilterPersistentVolumeClaims(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterPersistentVolumeClaims", reflect.TypeOf((*MockClusterInterface)(nil).FilterPersistentVolumeClaims), arg0, arg1, arg2, arg3, arg4)
}

// FilterPersistentVolumes mocks base method.
func (m *MockClusterInterface) FilterPersistentVolumes(arg0 context.Context, arg1, arg2, arg3, arg4 string) ([]types.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterPersistentVolumes", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]types.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterPersistentVolumes indicates an expected call of FilterPersistentVolumes.
func (mr *MockClusterInterfaceMockRecorder) FilterPersistentVolumes(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterPersistentVolumes", reflect.TypeOf((*MockClusterInterface)(nil).FilterPersistentVolumes), arg0, arg1, arg2, arg3, arg4)
}

// FilterPods mocks base method.
func (m *MockClusterInterface) FilterPods(ctx context.Context, namespace, stsName string) (*v11.PodList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterPods", ctx, namespace, stsName)
	ret0, _ := ret[0].(*v11.PodList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterPods indicates an expected call of FilterPods.
func (mr *MockClusterInterfaceMockRecorder) FilterPods(ctx, namespace, stsName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterPods", reflect.TypeOf((*MockClusterInterface)(nil).FilterPods), ctx, namespace, stsName)
}

// FilterReplicationGroups mocks base method.
func (m *MockClusterInterface) FilterReplicationGroups(arg0 context.Context, arg1, arg2 string) (*types.RGList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterReplicationGroups", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.RGList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterReplicationGroups indicates an expected call of FilterReplicationGroups.
func (mr *MockClusterInterfaceMockRecorder) FilterReplicationGroups(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterReplicationGroups", reflect.TypeOf((*MockClusterInterface)(nil).FilterReplicationGroups), arg0, arg1, arg2)
}

// FilterStorageClass mocks base method.
func (m *MockClusterInterface) FilterStorageClass(arg0 context.Context, arg1 string, arg2 bool) (*types.SCList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterStorageClass", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.SCList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterStorageClass indicates an expected call of FilterStorageClass.
func (mr *MockClusterInterfaceMockRecorder) FilterStorageClass(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterStorageClass", reflect.TypeOf((*MockClusterInterface)(nil).FilterStorageClass), arg0, arg1, arg2)
}

// GetClient mocks base method.
func (m *MockClusterInterface) GetClient() k8s.ClientInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(k8s.ClientInterface)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockClusterInterfaceMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockClusterInterface)(nil).GetClient))
}

// GetHost mocks base method.
func (m *MockClusterInterface) GetHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHost indicates an expected call of GetHost.
func (mr *MockClusterInterfaceMockRecorder) GetHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockClusterInterface)(nil).GetHost))
}

// GetID mocks base method.
func (m *MockClusterInterface) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockClusterInterfaceMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockClusterInterface)(nil).GetID))
}

// GetKubeConfigFile mocks base method.
func (m *MockClusterInterface) GetKubeConfigFile() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubeConfigFile")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetKubeConfigFile indicates an expected call of GetKubeConfigFile.
func (mr *MockClusterInterfaceMockRecorder) GetKubeConfigFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubeConfigFile", reflect.TypeOf((*MockClusterInterface)(nil).GetKubeConfigFile))
}

// GetKubeVersion mocks base method.
func (m *MockClusterInterface) GetKubeVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubeVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetKubeVersion indicates an expected call of GetKubeVersion.
func (mr *MockClusterInterfaceMockRecorder) GetKubeVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubeVersion", reflect.TypeOf((*MockClusterInterface)(nil).GetKubeVersion))
}

// GetMigrationGroup mocks base method.
func (m *MockClusterInterface) GetMigrationGroup(arg0 context.Context, arg1 string) (*v1.DellCSIMigrationGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMigrationGroup", arg0, arg1)
	ret0, _ := ret[0].(*v1.DellCSIMigrationGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMigrationGroup indicates an expected call of GetMigrationGroup.
func (mr *MockClusterInterfaceMockRecorder) GetMigrationGroup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigrationGroup", reflect.TypeOf((*MockClusterInterface)(nil).GetMigrationGroup), arg0, arg1)
}

// GetNamespace mocks base method.
func (m *MockClusterInterface) GetNamespace(arg0 context.Context, arg1 string) (*v11.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", arg0, arg1)
	ret0, _ := ret[0].(*v11.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockClusterInterfaceMockRecorder) GetNamespace(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockClusterInterface)(nil).GetNamespace), arg0, arg1)
}

// GetPersistentVolume mocks base method.
func (m *MockClusterInterface) GetPersistentVolume(arg0 context.Context, arg1 string) (*v11.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersistentVolume", arg0, arg1)
	ret0, _ := ret[0].(*v11.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersistentVolume indicates an expected call of GetPersistentVolume.
func (mr *MockClusterInterfaceMockRecorder) GetPersistentVolume(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersistentVolume", reflect.TypeOf((*MockClusterInterface)(nil).GetPersistentVolume), arg0, arg1)
}

// GetPersistentVolumeClaim mocks base method.
func (m *MockClusterInterface) GetPersistentVolumeClaim(arg0 context.Context, arg1, arg2 string) (*v11.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersistentVolumeClaim", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v11.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersistentVolumeClaim indicates an expected call of GetPersistentVolumeClaim.
func (mr *MockClusterInterfaceMockRecorder) GetPersistentVolumeClaim(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersistentVolumeClaim", reflect.TypeOf((*MockClusterInterface)(nil).GetPersistentVolumeClaim), arg0, arg1, arg2)
}

// GetPod mocks base method.
func (m *MockClusterInterface) GetPod(ctx context.Context, name, namespace string) (*v11.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPod", ctx, name, namespace)
	ret0, _ := ret[0].(*v11.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPod indicates an expected call of GetPod.
func (mr *MockClusterInterfaceMockRecorder) GetPod(ctx, name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPod", reflect.TypeOf((*MockClusterInterface)(nil).GetPod), ctx, name, namespace)
}

// GetReplicationGroups mocks base method.
func (m *MockClusterInterface) GetReplicationGroups(arg0 context.Context, arg1 string) (*v1.DellCSIReplicationGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationGroups", arg0, arg1)
	ret0, _ := ret[0].(*v1.DellCSIReplicationGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicationGroups indicates an expected call of GetReplicationGroups.
func (mr *MockClusterInterfaceMockRecorder) GetReplicationGroups(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationGroups", reflect.TypeOf((*MockClusterInterface)(nil).GetReplicationGroups), arg0, arg1)
}

// GetSecret mocks base method.
func (m *MockClusterInterface) GetSecret(arg0 context.Context, arg1, arg2 string) (*v11.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v11.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockClusterInterfaceMockRecorder) GetSecret(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockClusterInterface)(nil).GetSecret), arg0, arg1, arg2)
}

// GetStatefulSet mocks base method.
func (m *MockClusterInterface) GetStatefulSet(arg0 context.Context, arg1, arg2 string) (*v10.StatefulSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatefulSet", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v10.StatefulSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatefulSet indicates an expected call of GetStatefulSet.
func (mr *MockClusterInterfaceMockRecorder) GetStatefulSet(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatefulSet", reflect.TypeOf((*MockClusterInterface)(nil).GetStatefulSet), arg0, arg1, arg2)
}

// ListPersistentVolumeClaims mocks base method.
func (m *MockClusterInterface) ListPersistentVolumeClaims(arg0 context.Context, arg1 ...client.ListOption) (*v11.PersistentVolumeClaimList, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPersistentVolumeClaims", varargs...)
	ret0, _ := ret[0].(*v11.PersistentVolumeClaimList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPersistentVolumeClaims indicates an expected call of ListPersistentVolumeClaims.
func (mr *MockClusterInterfaceMockRecorder) ListPersistentVolumeClaims(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPersistentVolumeClaims", reflect.TypeOf((*MockClusterInterface)(nil).ListPersistentVolumeClaims), varargs...)
}

// ListPersistentVolumes mocks base method.
func (m *MockClusterInterface) ListPersistentVolumes(arg0 context.Context, arg1 ...client.ListOption) (*v11.PersistentVolumeList, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPersistentVolumes", varargs...)
	ret0, _ := ret[0].(*v11.PersistentVolumeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPersistentVolumes indicates an expected call of ListPersistentVolumes.
func (mr *MockClusterInterfaceMockRecorder) ListPersistentVolumes(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPersistentVolumes", reflect.TypeOf((*MockClusterInterface)(nil).ListPersistentVolumes), varargs...)
}

// ListPods mocks base method.
func (m *MockClusterInterface) ListPods(ctx context.Context, opts ...client.ListOption) (*v11.PodList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPods", varargs...)
	ret0, _ := ret[0].(*v11.PodList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPods indicates an expected call of ListPods.
func (mr *MockClusterInterfaceMockRecorder) ListPods(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPods", reflect.TypeOf((*MockClusterInterface)(nil).ListPods), varargs...)
}

// ListReplicationGroups mocks base method.
func (m *MockClusterInterface) ListReplicationGroups(arg0 context.Context, arg1 ...client.ListOption) (*v1.DellCSIReplicationGroupList, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReplicationGroups", varargs...)
	ret0, _ := ret[0].(*v1.DellCSIReplicationGroupList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReplicationGroups indicates an expected call of ListReplicationGroups.
func (mr *MockClusterInterfaceMockRecorder) ListReplicationGroups(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReplicationGroups", reflect.TypeOf((*MockClusterInterface)(nil).ListReplicationGroups), varargs...)
}

// ListStorageClass mocks base method.
func (m *MockClusterInterface) ListStorageClass(arg0 context.Context, arg1 ...client.ListOption) (*v12.StorageClassList, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStorageClass", varargs...)
	ret0, _ := ret[0].(*v12.StorageClassList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStorageClass indicates an expected call of ListStorageClass.
func (mr *MockClusterInterfaceMockRecorder) ListStorageClass(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageClass", reflect.TypeOf((*MockClusterInterface)(nil).ListStorageClass), varargs...)
}

// PatchReplicationGroup mocks base method.
func (m *MockClusterInterface) PatchReplicationGroup(arg0 context.Context, arg1 *v1.DellCSIReplicationGroup, arg2 client.Patch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchReplicationGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchReplicationGroup indicates an expected call of PatchReplicationGroup.
func (mr *MockClusterInterfaceMockRecorder) PatchReplicationGroup(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchReplicationGroup", reflect.TypeOf((*MockClusterInterface)(nil).PatchReplicationGroup), arg0, arg1, arg2)
}

// SetClient mocks base method.
func (m *MockClusterInterface) SetClient(arg0 k8s.ClientInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClient", arg0)
}

// SetClient indicates an expected call of SetClient.
func (mr *MockClusterInterfaceMockRecorder) SetClient(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockClusterInterface)(nil).SetClient), arg0)
}

// UpdateMigrationGroup mocks base method.
func (m *MockClusterInterface) UpdateMigrationGroup(arg0 context.Context, arg1 *v1.DellCSIMigrationGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMigrationGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMigrationGroup indicates an expected call of UpdateMigrationGroup.
func (mr *MockClusterInterfaceMockRecorder) UpdateMigrationGroup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMigrationGroup", reflect.TypeOf((*MockClusterInterface)(nil).UpdateMigrationGroup), arg0, arg1)
}

// UpdatePersistentVolume mocks base method.
func (m *MockClusterInterface) UpdatePersistentVolume(ctx context.Context, pv *v11.PersistentVolume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePersistentVolume", ctx, pv)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePersistentVolume indicates an expected call of UpdatePersistentVolume.
func (mr *MockClusterInterfaceMockRecorder) UpdatePersistentVolume(ctx, pv any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePersistentVolume", reflect.TypeOf((*MockClusterInterface)(nil).UpdatePersistentVolume), ctx, pv)
}

// UpdateReplicationGroup mocks base method.
func (m *MockClusterInterface) UpdateReplicationGroup(arg0 context.Context, arg1 *v1.DellCSIReplicationGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReplicationGroup indicates an expected call of UpdateReplicationGroup.
func (mr *MockClusterInterfaceMockRecorder) UpdateReplicationGroup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationGroup", reflect.TypeOf((*MockClusterInterface)(nil).UpdateReplicationGroup), arg0, arg1)
}

// UpdateSecret mocks base method.
func (m *MockClusterInterface) UpdateSecret(ctx context.Context, secret *v11.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", ctx, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockClusterInterfaceMockRecorder) UpdateSecret(ctx, secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockClusterInterface)(nil).UpdateSecret), ctx, secret)
}

// MockMultiClusterConfiguratorInterface is a mock of MultiClusterConfiguratorInterface interface.
type MockMultiClusterConfiguratorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMultiClusterConfiguratorInterfaceMockRecorder
	isgomock struct{}
}

// MockMultiClusterConfiguratorInterfaceMockRecorder is the mock recorder for MockMultiClusterConfiguratorInterface.
type MockMultiClusterConfiguratorInterfaceMockRecorder struct {
	mock *MockMultiClusterConfiguratorInterface
}

// NewMockMultiClusterConfiguratorInterface creates a new mock instance.
func NewMockMultiClusterConfiguratorInterface(ctrl *gomock.Controller) *MockMultiClusterConfiguratorInterface {
	mock := &MockMultiClusterConfiguratorInterface{ctrl: ctrl}
	mock.recorder = &MockMultiClusterConfiguratorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiClusterConfiguratorInterface) EXPECT() *MockMultiClusterConfiguratorInterfaceMockRecorder {
	return m.recorder
}

// GetAllClusters mocks base method.
func (m *MockMultiClusterConfiguratorInterface) GetAllClusters(arg0 []string, arg1 string) (*k8s.Clusters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllClusters", arg0, arg1)
	ret0, _ := ret[0].(*k8s.Clusters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllClusters indicates an expected call of GetAllClusters.
func (mr *MockMultiClusterConfiguratorInterfaceMockRecorder) GetAllClusters(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllClusters", reflect.TypeOf((*MockMultiClusterConfiguratorInterface)(nil).GetAllClusters), arg0, arg1)
}

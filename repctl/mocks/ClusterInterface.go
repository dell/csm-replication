// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	client "sigs.k8s.io/controller-runtime/pkg/client"

	k8s "github.com/dell/repctl/pkg/k8s"

	mock "github.com/stretchr/testify/mock"

	runtime "k8s.io/apimachinery/pkg/runtime"

	storagev1 "k8s.io/api/storage/v1"

	testing "testing"

	types "github.com/dell/repctl/pkg/types"

	v1 "k8s.io/api/core/v1"

	v1alpha1 "github.com/dell/csm-replication/api/v1alpha1"
)

// ClusterInterface is an autogenerated mock type for the ClusterInterface type
type ClusterInterface struct {
	mock.Mock
}

// CreateNamespace provides a mock function with given fields: _a0, _a1
func (_m *ClusterInterface) CreateNamespace(_a0 context.Context, _a1 *v1.Namespace) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Namespace) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateObject provides a mock function with given fields: _a0, _a1
func (_m *ClusterInterface) CreateObject(_a0 context.Context, _a1 []byte) (runtime.Object, error) {
	ret := _m.Called(_a0, _a1)

	var r0 runtime.Object
	if rf, ok := ret.Get(0).(func(context.Context, []byte) runtime.Object); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Object)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePersistentVolumeClaimsFromPVs provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ClusterInterface) CreatePersistentVolumeClaimsFromPVs(_a0 context.Context, _a1 string, _a2 []types.PersistentVolume, _a3 string, _a4 bool) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []types.PersistentVolume, string, bool) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterPersistentVolumeClaims provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ClusterInterface) FilterPersistentVolumeClaims(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 string) (*types.PersistentVolumeClaimList, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *types.PersistentVolumeClaimList
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *types.PersistentVolumeClaimList); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PersistentVolumeClaimList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterPersistentVolumes provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ClusterInterface) FilterPersistentVolumes(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 string) ([]types.PersistentVolume, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 []types.PersistentVolume
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) []types.PersistentVolume); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.PersistentVolume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterReplicationGroups provides a mock function with given fields: _a0, _a1, _a2
func (_m *ClusterInterface) FilterReplicationGroups(_a0 context.Context, _a1 string, _a2 string) (*types.RGList, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *types.RGList
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *types.RGList); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.RGList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterStorageClass provides a mock function with given fields: _a0, _a1, _a2
func (_m *ClusterInterface) FilterStorageClass(_a0 context.Context, _a1 string, _a2 bool) (*types.SCList, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *types.SCList
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *types.SCList); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SCList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClient provides a mock function with given fields:
func (_m *ClusterInterface) GetClient() k8s.ClientInterface {
	ret := _m.Called()

	var r0 k8s.ClientInterface
	if rf, ok := ret.Get(0).(func() k8s.ClientInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(k8s.ClientInterface)
		}
	}

	return r0
}

// GetHost provides a mock function with given fields:
func (_m *ClusterInterface) GetHost() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetID provides a mock function with given fields:
func (_m *ClusterInterface) GetID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetKubeConfigFile provides a mock function with given fields:
func (_m *ClusterInterface) GetKubeConfigFile() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetKubeVersion provides a mock function with given fields:
func (_m *ClusterInterface) GetKubeVersion() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetNamespace provides a mock function with given fields: _a0, _a1
func (_m *ClusterInterface) GetNamespace(_a0 context.Context, _a1 string) (*v1.Namespace, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.Namespace
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1.Namespace); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Namespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPersistentVolume provides a mock function with given fields: _a0, _a1
func (_m *ClusterInterface) GetPersistentVolume(_a0 context.Context, _a1 string) (*v1.PersistentVolume, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.PersistentVolume
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1.PersistentVolume); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PersistentVolume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationGroups provides a mock function with given fields: _a0, _a1
func (_m *ClusterInterface) GetReplicationGroups(_a0 context.Context, _a1 string) (*v1alpha1.DellCSIReplicationGroup, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.DellCSIReplicationGroup
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1alpha1.DellCSIReplicationGroup); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DellCSIReplicationGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecret provides a mock function with given fields: _a0, _a1, _a2
func (_m *ClusterInterface) GetSecret(_a0 context.Context, _a1 string, _a2 string) (*v1.Secret, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *v1.Secret
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.Secret); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Secret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPersistentVolumeClaims provides a mock function with given fields: _a0, _a1
func (_m *ClusterInterface) ListPersistentVolumeClaims(_a0 context.Context, _a1 ...client.ListOption) (*v1.PersistentVolumeClaimList, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.PersistentVolumeClaimList
	if rf, ok := ret.Get(0).(func(context.Context, ...client.ListOption) *v1.PersistentVolumeClaimList); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PersistentVolumeClaimList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...client.ListOption) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPersistentVolumes provides a mock function with given fields: _a0, _a1
func (_m *ClusterInterface) ListPersistentVolumes(_a0 context.Context, _a1 ...client.ListOption) (*v1.PersistentVolumeList, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.PersistentVolumeList
	if rf, ok := ret.Get(0).(func(context.Context, ...client.ListOption) *v1.PersistentVolumeList); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PersistentVolumeList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...client.ListOption) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReplicationGroups provides a mock function with given fields: _a0, _a1
func (_m *ClusterInterface) ListReplicationGroups(_a0 context.Context, _a1 ...client.ListOption) (*v1alpha1.DellCSIReplicationGroupList, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.DellCSIReplicationGroupList
	if rf, ok := ret.Get(0).(func(context.Context, ...client.ListOption) *v1alpha1.DellCSIReplicationGroupList); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DellCSIReplicationGroupList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...client.ListOption) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStorageClass provides a mock function with given fields: _a0, _a1
func (_m *ClusterInterface) ListStorageClass(_a0 context.Context, _a1 ...client.ListOption) (*storagev1.StorageClassList, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *storagev1.StorageClassList
	if rf, ok := ret.Get(0).(func(context.Context, ...client.ListOption) *storagev1.StorageClassList); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagev1.StorageClassList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...client.ListOption) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchReplicationGroup provides a mock function with given fields: _a0, _a1, _a2
func (_m *ClusterInterface) PatchReplicationGroup(_a0 context.Context, _a1 *v1alpha1.DellCSIReplicationGroup, _a2 client.Patch) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.DellCSIReplicationGroup, client.Patch) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetClient provides a mock function with given fields: _a0
func (_m *ClusterInterface) SetClient(_a0 k8s.ClientInterface) {
	_m.Called(_a0)
}

// UpdateReplicationGroup provides a mock function with given fields: _a0, _a1
func (_m *ClusterInterface) UpdateReplicationGroup(_a0 context.Context, _a1 *v1alpha1.DellCSIReplicationGroup) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.DellCSIReplicationGroup) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSecret provides a mock function with given fields: ctx, secret
func (_m *ClusterInterface) UpdateSecret(ctx context.Context, secret *v1.Secret) error {
	ret := _m.Called(ctx, secret)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Secret) error); ok {
		r0 = rf(ctx, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClusterInterface creates a new instance of ClusterInterface. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewClusterInterface(t testing.TB) *ClusterInterface {
	mock := &ClusterInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
